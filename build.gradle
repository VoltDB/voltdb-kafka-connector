/*
 * The MIT License (MIT)
 *
 * Copyright (C) 2008-2018 VoltDB Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

plugins {
  id 'java'
  id 'eclipse'
  id 'com.github.johnrengelman.shadow' version '7.0.0'
}

archivesBaseName = 'voltdb-sink-connector'
description = 'VoltDB Sink Connector'
/* Change Version when updating */
version = '1.0'

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    voltlib
    connect
}

def voltdbclient = "${voltdbhome}/voltdb/voltdbclient-${dbversion}.jar"
def voltdb = "${voltdbhome}/voltdb/voltdb-${dbversion}.jar"

if (!file(voltdbclient).exists()) {
    throw new GradleException("Cannot find JAR file: " + voltdbclient)
}
if (!file(voltdb).exists()) {
    throw new GradleException("Cannot find JAR file: " + voltdb)
}

tasks.register('prepare', Copy)
tasks.register('zip', Zip)

dependencies {
    voltlib files(voltdbclient)
    voltlib files("${buildDir}/unpacked/") {
        builtBy(tasks.prepare)
    }
    voltlib files("${buildDir}/distributions/${archivesBaseName}-${version}.zip") {
        builtBy(tasks.zip)
    }
    connect ('org.apache.kafka:connect-api:0.10.0.0') { transitive = false }
    connect ('org.apache.kafka:kafka-clients:0.10.0.0') { transitive = false }
    connect ('org.apache.kafka:connect-json:0.10.0.0') { transitive = false }
    voltlib ('com.fasterxml.jackson.core:jackson-databind:2.5.3') { transitive = true }
    voltlib ('com.fasterxml.jackson.core:jackson-annotations:2.5.3') { transitive = true }
    voltlib ('com.fasterxml.jackson.core:jackson-core:2.5.3') { transitive = true }
    voltlib ('com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.5.3') { transitive = true }

    implementation configurations.connect
    implementation configurations.voltlib
}

shadowJar {
    from project.configurations.voltlib

    mergeServiceFiles()
}

zip {
    from tasks.prepare
}

prepare {
    def zipFile = file(voltdb)
    def outputDir = file("${buildDir}/unpacked/")

    outputs.dir(outputDir)

    from zipTree(zipFile)
    into outputDir
    include 'org/voltdb/importer/formatter/**'
    include 'au/com/bytecode/opencsv_voltpatches/**'
}
